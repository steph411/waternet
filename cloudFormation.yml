AWSTemplateFormatVersion: 2010-09-09
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project ewatergate
      Name: ewatergate.local
      Vpc: vpc-d10928ab
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: ewatergate
      Tags:
        - Key: com.docker.compose.project
          Value: ewatergate
    Type: AWS::ECS::Cluster
  Default80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: graphql-api:80/tcp on default network
      FromPort: 80
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: ewatergate Security Group for default network
      Tags:
        - Key: com.docker.compose.project
          Value: ewatergate
        - Key: com.docker.compose.network
          Value: ewatergate_default
      VpcId: vpc-d10928ab
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  GraphqlapiService:
    DependsOn:
      - GraphqlapiTCP80Listener
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: graphql-api
          ContainerPort: 80
          TargetGroupArn:
            Ref: GraphqlapiTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - subnet-d92732be
            - subnet-36495a18
            - subnet-79015947
            - subnet-33baac6f
            - subnet-570da81a
            - subnet-104c831e
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - GraphqlapiServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: ewatergate
        - Key: com.docker.compose.service
          Value: graphql-api
      TaskDefinition:
        Ref: GraphqlapiTaskDefinition
    Type: AWS::ECS::Service
  GraphqlapiServiceDiscoveryEntry:
    Properties:
      Description: '"graphql-api" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: graphql-api
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  GraphqlapiTCP80Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: GraphqlapiTCP80TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  GraphqlapiTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: com.docker.compose.project
          Value: ewatergate
      TargetType: ip
      VpcId: vpc-d10928ab
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  GraphqlapiTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - ewatergate.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ewatergate
          Name: Graphqlapi_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Graphqlapi_ResolvConf_InitContainer
          Environment:
            - Name: HASURA_GRAPHQL_ADMIN_SECRET
              Value: ewatergate-api
            - Name: HASURA_GRAPHQL_DATABASE_URL
              Value: postgres://ewatergate:ewatergate@ewatergate-db.c1bpnhaaexuq.us-east-1.rds.amazonaws.com:5432/postgres
            - Name: HASURA_GRAPHQL_DEV_MODE
              Value: "true"
            - Name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              Value: startup, http-log, webhook-log, websocket-log, query-log
            - Name: HASURA_GRAPHQL_ENABLE_CONSOLE
              Value: "true"
            - Name: HASURA_GRAPHQL_JWT_SECRET
              Value:
                '{"type": "HS512", "key": "0ddf5597e02d981f8803c4cc11f015a4e52679d706edb29b595d9e466def5bcf95273a3053ab5d97ee893c23e4023b912daefaade316406a33b7685d4d223dfa",
                "claims_namespace": "api"}'
            - Name: HASURA_GRAPHQL_SERVER_PORT
              Value: "80"
            - Name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
              Value: public
          Essential: true
          Image: docker.io/hasura/graphql-engine:latest@sha256:814e36b355177046195edd795ca561fe762a2ae117129f185a26f9d3f609efb9
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ewatergate
          Name: graphql-api
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: GraphqlapiTaskExecutionRole
      Family: ewatergate-graphql-api
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  GraphqlapiTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: ewatergate
        - Key: com.docker.compose.service
          Value: graphql-api
    Type: AWS::IAM::Role
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: DefaultNetwork
      Subnets:
        - subnet-d92732be
        - subnet-36495a18
        - subnet-79015947
        - subnet-33baac6f
        - subnet-570da81a
        - subnet-104c831e
      Tags:
        - Key: com.docker.compose.project
          Value: ewatergate
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/ewatergate
    Type: AWS::Logs::LogGroup
  GraphqlapiTCP443Listener:
    Properties:
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:570528589545:certificate/5ff1e2e1-4f07-448c-9ef4-10d602ab0ddd
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: GraphqlapiTCP443TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener

  GraphqlapiTCP443TargetGroup:
    Properties:
      Port: 443
      Protocol: HTTPS
      Tags:
        - Key: com.docker.compose.project
          Value: ewatergate
      TargetType: ip
      VpcId: vpc-d10928ab
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

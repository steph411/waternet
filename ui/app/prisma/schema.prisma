generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  // url      = "postgres://ewatergate:ewatergate@ewatergate-db.c1bpnhaaexuq.us-east-1.rds.amazonaws.com:5432/postgres"
  url = "postgres://ewatergate:ewatergate@localhost:8899/ewatergate"
}

model Account {
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  id                 String    @id @default(dbgenerated())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  id           String   @id @default(dbgenerated())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  id            String    @id @default(dbgenerated())
  name          String?
  firstname     String?
  lastname      String?
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  city          String?
  country       String?

  pages              UserOnPages[]
  groups             UserOnGroups[]
  interestCategories UserOnCategories[]


  @@map("users")
  Post    Post[]
  Comment Comment[]
  Like    Like[]
  Share   Share[]
}

model VerificationRequest {
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  id         String   @id @default(dbgenerated())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Account {
//   id                 String    @id   @default(uuid())
//   compoundId         String    @unique @map(name: "compound_id")
//   userId             String       @map(name: "user_id")
//   providerType       String    @map(name: "provider_type")
//   providerId         String    @map(name: "provider_id")
//   providerAccountId  String    @map(name: "provider_account_id")
//   refreshToken       String?   @map(name: "refresh_token")
//   accessToken        String?   @map(name: "access_token")
//   accessTokenExpires DateTime? @map(name: "access_token_expires")
//   createdAt          DateTime  @default(now()) @map(name: "created_at")
//   updatedAt          DateTime  @default(now()) @map(name: "updated_at")

//   @@index([providerAccountId], name: "providerAccountId")
//   @@index([providerId], name: "providerId")
//   @@index([userId], name: "userId")

//   @@map(name: "accounts")
// }

// model Session {
//   id           String   @id   @default(uuid())
//   userId       String      @map(name: "user_id")
//   expires      DateTime
//   sessionToken String   @unique @map(name: "session_token")
//   accessToken  String   @unique @map(name: "access_token")
//   createdAt    DateTime @default(now()) @map(name: "created_at")
//   updatedAt    DateTime @default(now()) @map(name: "updated_at")

//   @@map(name: "sessions")
// }

// model User {
//   id            String   @id    @default(uuid())
//   name          String?
//   firstname     String?
//   lastname      String?
//   city          String?
//   country       String?
//   password      String?
//   email         String?   @unique
//   emailVerified DateTime? @map(name: "email_verified")
//   image         String?
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @default(now()) @map(name: "updated_at")

//   pages                     UserOnPages[]
//   groups                    UserOnGroups[]
//   interestCategories        UserOnCategories[]

//   @@map(name: "users")
// }

// model VerificationRequest {
//   id         String   @id  @default(uuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime  @default(now()) @map(name: "created_at")
//   updatedAt  DateTime  @default(now()) @map(name: "updated_at")

//   @@map(name: "verification_requests")
// }

model Post {
  id      String  @id @default(dbgenerated())
  title   String?
  content String
  userId  String  @map(name: "user_id")
  user    User    @relation(fields: [userId], references: [id])

  comments   Comment[]
  images     Image[]
  videos     Video[]
  categories CategoryOnPosts[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")


  @@map(name: "posts")
  Like  Like[]
  Share Share[]
}

model CategoryOnPosts {
  postId     String   @map(name: "post_id")
  post       Post     @relation(fields: [postId], references: [id])
  categoryId String   @map(name: "category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@id([postId, categoryId])
}

model UserOnPages {
  pageId String @map(name: "page_id")
  page   Page   @relation(fields: [pageId], references: [id])
  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@id([pageId, userId])
}

model UserOnGroups {
  groupId String @map(name: "group_id")
  group   Group  @relation(fields: [groupId], references: [id])
  userId  String @map(name: "user_id")
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@id([groupId, userId])
}

model UserOnCategories {
  categoryId String   @map(name: "category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  userId     String   @map(name: "user_id")
  user       User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@id([categoryId, userId])
}

model Comment {
  id     String @id @default(dbgenerated())
  text   String
  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  parentCommentId String?  @map(name: "parent_comment_id")
  parentComment   Comment? @relation("comments", fields: [parentCommentId], references: [id])

  comments Comment[] @relation("comments")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "comments")
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  Like   Like[]
}

model Image {
  id   String @id @default(dbgenerated())
  link String

  postId String? @map(name: "post_id")
  post   Post?   @relation(fields: [postId], references: [id])

  groupId String? @map(name: "group_id")
  group   Group?  @relation(fields: [groupId], references: [id])

  pageId String? @map(name: "page_id")
  page   Page?   @relation(fields: [pageId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "images")
}

model Video {
  id     String @id @default(dbgenerated())
  link   String
  postId String @map(name: "post_id")
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "videos")
}

model Like {
  id     String  @id @default(dbgenerated())
  postId String? @map(name: "post_id")
  post   Post?   @relation(fields: [postId], references: [id])

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])


  commentId String?  @map(name: "comment_id")
  comment   Comment? @relation(fields: [commentId], references: [id])



  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "likes")
}

model Share {
  id     String  @id @default(dbgenerated())
  postId String? @map(name: "post_id")
  post   Post?   @relation(fields: [postId], references: [id])

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])


  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "shares")
}

model Page {
  id     String        @id @default(dbgenerated())
  name   String        @unique
  users  UserOnPages[]
  images Image[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "pages")
}

model Group {
  id     String         @id @default(dbgenerated())
  name   String         @unique
  users  UserOnGroups[]
  images Image[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "groups")
}

enum CategoryType {
  USER
  TECHNICAL
}

model UserCategory {
  id         String     @id @default(dbgenerated())
  name       String     @unique
  categories Category[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "user_categories")
}

model Category {
  id             String            @id @default(dbgenerated())
  name           String            @unique
  type           CategoryType
  userCategoryId String?           @map(name: "user_category_id")
  userCategory   UserCategory?     @relation(fields: [userCategoryId], references: [id])
  posts          CategoryOnPosts[]

  interestedUsers UserOnCategories[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "categories")
}
